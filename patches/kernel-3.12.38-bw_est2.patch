diff --exclude CVS --exclude .git -uNr linux-3.12.38/drivers/infiniband/hw/cxgb4/cm.c linux-3.12.38.modified/drivers/infiniband/hw/cxgb4/cm.c
--- linux-3.12.38/drivers/infiniband/hw/cxgb4/cm.c	2015-02-16 10:15:42.000000000 -0500
+++ linux-3.12.38.modified/drivers/infiniband/hw/cxgb4/cm.c	2015-06-27 18:11:45.623109566 -0400
@@ -3200,7 +3200,7 @@
 	 */
 	memset(&tmp_opt, 0, sizeof(tmp_opt));
 	tcp_clear_options(&tmp_opt);
-	tcp_parse_options(skb, &tmp_opt, 0, NULL);
+	tcp_parse_options(skb, &tmp_opt, 0, NULL, 0);
 
 	req = (struct cpl_pass_accept_req *)__skb_push(skb, sizeof(*req));
 	memset(req, 0, sizeof(*req));
diff --exclude CVS --exclude .git -uNr linux-3.12.38/include/linux/tcp.h linux-3.12.38.modified/include/linux/tcp.h
--- linux-3.12.38/include/linux/tcp.h	2015-07-02 01:25:45.535759616 -0400
+++ linux-3.12.38.modified/include/linux/tcp.h	2015-06-13 18:37:41.754087014 -0400
@@ -98,6 +98,8 @@
 	u8	num_sacks;	/* Number of SACK blocks		*/
 	u16	user_mss;	/* mss requested by user in ioctl	*/
 	u16	mss_clamp;	/* Maximal mss, negotiated at connection setup */
+	__u32 rcv_tsval_us;/* Time stamp value in microseconds */
+	__u32 rcv_tsecr_us;/* Time stamp echo reply           */
 };
 
 static inline void tcp_clear_options(struct tcp_options_received *rx_opt)
diff --exclude CVS --exclude .git -uNr linux-3.12.38/include/net/tcp.h linux-3.12.38.modified/include/net/tcp.h
--- linux-3.12.38/include/net/tcp.h	2015-07-02 01:25:48.903759763 -0400
+++ linux-3.12.38.modified/include/net/tcp.h	2015-07-02 00:54:46.699678548 -0400
@@ -55,6 +55,8 @@
 #define MAX_TCP_HEADER	(128 + MAX_HEADER)
 #define MAX_TCP_OPTION_SPACE 40
 
+#define LONG_MASK  (~(0UL))  /* DO. Should not be here */
+
 /* 
  * Never offer a window over 32767 without using window scaling. Some
  * poor stacks do signed 16bit maths! 
@@ -411,7 +413,8 @@
 
 extern enum tcp_tw_status tcp_timewait_state_process(struct inet_timewait_sock *tw,
 						     struct sk_buff *skb,
-						     const struct tcphdr *th);
+						     const struct tcphdr *th, 
+							unsigned int bw_est_en);
 extern struct sock * tcp_check_req(struct sock *sk,struct sk_buff *skb,
 				   struct request_sock *req,
 				   struct request_sock **prev,
@@ -446,7 +449,8 @@
 		       size_t len, int nonblock, int flags, int *addr_len);
 extern void tcp_parse_options(const struct sk_buff *skb,
 			      struct tcp_options_received *opt_rx,
-			      int estab, struct tcp_fastopen_cookie *foc);
+			      int estab, struct tcp_fastopen_cookie *foc,
+			      int bw_est_mode);
 extern const u8 *tcp_parse_md5sig_option(const struct tcphdr *th);
 
 /*
@@ -695,13 +699,13 @@
  *
  * DO. Change to micro seconds by using get time of the day
  */
- /* #define tcp_time_stamp		((__u32)(jiffies)) */
-static inline u32 __get_tcp_time_stamp_us (void) {
-    struct timeval tv;
-    do_gettimeofday(&tv);
-    return tv.tv_usec;
-}
-#define tcp_time_stamp __get_tcp_time_stamp_us()
+#define tcp_time_stamp		((__u32)(jiffies))
+//static inline u32 __get_tcp_time_stamp_us (void) {
+//    struct timeval tv;
+//    do_gettimeofday(&tv);
+//    return tv.tv_usec;
+//}
+//#define tcp_time_stamp __get_tcp_time_stamp_us()
 
 #define tcp_flag_byte(th) (((u_int8_t *)th)[13])
 
diff --exclude CVS --exclude .git -uNr linux-3.12.38/net/ipv4/syncookies.c linux-3.12.38.modified/net/ipv4/syncookies.c
--- linux-3.12.38/net/ipv4/syncookies.c	2015-02-16 10:15:42.000000000 -0500
+++ linux-3.12.38.modified/net/ipv4/syncookies.c	2015-06-27 17:13:52.291059590 -0400
@@ -289,7 +289,8 @@
 
 	/* check for timestamp cookie support */
 	memset(&tcp_opt, 0, sizeof(tcp_opt));
-	tcp_parse_options(skb, &tcp_opt, 0, NULL);
+	tcp_parse_options(skb, &tcp_opt, 0, NULL,
+			(tp->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE));
 
 	if (!cookie_check_timestamp(&tcp_opt, sock_net(sk), &ecn_ok))
 		goto out;
diff --exclude CVS --exclude .git -uNr linux-3.12.38/net/ipv4/tcp_bw_est.c linux-3.12.38.modified/net/ipv4/tcp_bw_est.c
--- linux-3.12.38/net/ipv4/tcp_bw_est.c	2015-07-02 01:25:50.775759844 -0400
+++ linux-3.12.38.modified/net/ipv4/tcp_bw_est.c	2015-06-13 17:54:30.450996402 -0400
@@ -22,10 +22,11 @@
       unsigned int array_size)
 {
     int ret = -1;         /* Assume error initializing fifo */
-    if ((fifo_p != NULL) && (array == NULL)) {
+    if ((fifo_p != NULL) && (array != NULL)) {
        memset (fifo_p, 0, sizeof(*fifo_p));
        fifo_p->array = array;
        fifo_p->size = array_size;
+       ret = 0;
     }
 
     return ret;
@@ -61,7 +62,7 @@
 
    if (bw_est_fifo_init(&bw_est_p->pkt_series_fifo,
          bw_est_p->pkt_series, BW_EST_AVG_WINDOW_SIZE)) {
-          printk(KERN_ERR"Error initializing continuous series packets. "
+          printk(KERN_ERR"Error initializing series packets. "
                 "Bw estimator will not be activated\n");
           bw_est_p->enabled = 0;
        return ret;
@@ -69,7 +70,14 @@
 
    if (bw_est_fifo_init(&bw_est_p->intvl_series_fifo, bw_est_p->cont_series,
          BW_EST_AVG_WINDOW_SIZE)) {
-          printk(KERN_ERR"Error initializing continuous series packets. "
+          printk(KERN_ERR"Error initializing interval series packets. "
+                "Bw estimator will not be activated\n");
+          bw_est_p->enabled = 0;
+   }
+
+   if (bw_est_fifo_init(&bw_est_p->avg_svc_var_fifo, bw_est_p->vars,
+         BW_EST_AVG_WINDOW_SIZE)) {
+          printk(KERN_ERR"Error initializing interval series packets. "
                 "Bw estimator will not be activated\n");
           bw_est_p->enabled = 0;
    }
@@ -263,12 +271,16 @@
     pkt_series_t pkt_series; /* Samples received */
     struct tcp_sock *tp = tcp_sk(sk);
     avg_fifo_t *pkt_series_fifo_p = &tp->m_bw_est.pkt_series_fifo;
+    struct timeval tv;
 
     /* No checking for pointer sanity to improve performance */
     /* Store current sent time. At this point, it is assume the system has
      * detected and store a timestmap */
-    pkt_series.recvd = tcp_time_stamp;
-    pkt_series.sent = tp->rx_opt.rcv_tsval;
+    do_gettimeofday(&tv);
+    pkt_series.recvd = tv.tv_usec;
+    pkt_series.sent = tp->rx_opt.rcv_tsval_us;
+    printk(KERN_ERR"%s:pkts rx=%u tx=%u\n", __FUNCTION__, pkt_series.recvd,
+       pkt_series.sent);
 
     if (likely (!bw_est_fifo_empty(pkt_series_fifo_p))) {
         const struct inet_connection_sock *icsk = inet_csk(sk);
diff --exclude CVS --exclude .git -uNr linux-3.12.38/net/ipv4/tcp_input.c linux-3.12.38.modified/net/ipv4/tcp_input.c
--- linux-3.12.38/net/ipv4/tcp_input.c	2015-07-02 01:25:50.779759845 -0400
+++ linux-3.12.38.modified/net/ipv4/tcp_input.c	2015-07-02 01:01:31.163696187 -0400
@@ -3470,7 +3470,7 @@
  */
 void tcp_parse_options(const struct sk_buff *skb,
 		       struct tcp_options_received *opt_rx, int estab,
-		       struct tcp_fastopen_cookie *foc)
+		       struct tcp_fastopen_cookie *foc, int bw_est_mode)
 {
 	const unsigned char *ptr;
 	const struct tcphdr *th = tcp_hdr(skb);
@@ -3586,12 +3586,27 @@
 			  | (TCPOPT_TIMESTAMP << 8) | TCPOLEN_TIMESTAMP)) {
 		tp->rx_opt.saw_tstamp = 1;
 		++ptr;
-		tp->rx_opt.rcv_tsval = ntohl(*ptr);
-		++ptr;
-		if (*ptr)
-			tp->rx_opt.rcv_tsecr = ntohl(*ptr) - tp->tsoffset;
-		else
-			tp->rx_opt.rcv_tsecr = 0;
+		if (tp->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE){
+			tp->rx_opt.rcv_tsval_us = ntohl(*ptr);
+       			tp->rx_opt.rcv_tsval = tp->rx_opt.rcv_tsval_us / 1000;   /* Transform to ms */
+              		++ptr;
+			if (*ptr) {
+				tp->rx_opt.rcv_tsecr_us = ntohl(*ptr);
+                tp->rx_opt.rcv_tsecr = (tp->rx_opt.rcv_tsecr_us / 1000) - tp->tsoffset;
+			}
+			else {
+				tp->rx_opt.rcv_tsecr_us = 0;
+				tp->rx_opt.rcv_tsecr = 0;
+			}
+		}
+		else {
+			tp->rx_opt.rcv_tsval = ntohl(*ptr);
+			++ptr;
+			if (*ptr)
+				tp->rx_opt.rcv_tsecr = ntohl(*ptr) - tp->tsoffset;
+			else
+				tp->rx_opt.rcv_tsecr = 0;
+		}
 		return true;
 	}
 	return false;
@@ -3603,6 +3618,9 @@
 static bool tcp_fast_parse_options(const struct sk_buff *skb,
 				   const struct tcphdr *th, struct tcp_sock *tp)
 {
+	int bw_est_en = 0;  /* Assume no bw est enabled */
+	if (tp->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE)
+		bw_est_en = 1;
 	/* In the spirit of fast parsing, compare doff directly to constant
 	 * values.  Because equality is used, short doff can be ignored here.
 	 */
@@ -3615,7 +3633,7 @@
 			return true;
 	}
 
-	tcp_parse_options(skb, &tp->rx_opt, 1, NULL);
+	tcp_parse_options(skb, &tp->rx_opt, 1, NULL, bw_est_en);
 	if (tp->rx_opt.saw_tstamp && tp->rx_opt.rcv_tsecr)
 		tp->rx_opt.rcv_tsecr -= tp->tsoffset;
 
@@ -5096,6 +5114,7 @@
      if (process_bw) {
          /* Process Markov bw estimation */
          ret = tcp_bw_est_m_process (sk, skb);
+	 tp->m_bw_est.processed = 1;
      }
      return ret;
  }
@@ -5147,6 +5166,10 @@
 
 	tp->rx_opt.saw_tstamp = 0;
 
+	if (likely(tp->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE)) {
+	    printk(KERN_ERR"%s\n", __FUNCTION__);
+	}
+
 	/*	pred_flags is 0xS?10 << 16 + snd_wnd
 	 *	if header_prediction is to be made
 	 *	'S' will always be tp->tcp_header_len >> 2
@@ -5411,7 +5434,8 @@
 		/* Get original SYNACK MSS value if user MSS sets mss_clamp */
 		tcp_clear_options(&opt);
 		opt.user_mss = opt.mss_clamp = 0;
-		tcp_parse_options(synack, &opt, 0, NULL);
+		tcp_parse_options(synack, &opt, 0, NULL,
+				(tp->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE));
 		mss = opt.mss_clamp;
 	}
 
@@ -5447,7 +5471,8 @@
 	struct tcp_fastopen_cookie foc = { .len = -1 };
 	int saved_clamp = tp->rx_opt.mss_clamp;
 
-	tcp_parse_options(skb, &tp->rx_opt, 0, &foc);
+	tcp_parse_options(skb, &tp->rx_opt, 0, &foc,
+			(tp->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE));
 	if (tp->rx_opt.saw_tstamp && tp->rx_opt.rcv_tsecr)
 		tp->rx_opt.rcv_tsecr -= tp->tsoffset;
 
diff --exclude CVS --exclude .git -uNr linux-3.12.38/net/ipv4/tcp_ipv4.c linux-3.12.38.modified/net/ipv4/tcp_ipv4.c
--- linux-3.12.38/net/ipv4/tcp_ipv4.c	2015-07-02 01:25:50.783759845 -0400
+++ linux-3.12.38.modified/net/ipv4/tcp_ipv4.c	2015-07-01 23:47:17.731501963 -0400
@@ -1496,7 +1496,8 @@
 	tcp_clear_options(&tmp_opt);
 	tmp_opt.mss_clamp = TCP_MSS_DEFAULT;
 	tmp_opt.user_mss  = tp->rx_opt.user_mss;
-	tcp_parse_options(skb, &tmp_opt, 0, want_cookie ? NULL : &foc);
+	tcp_parse_options(skb, &tmp_opt, 0, want_cookie ? NULL : &foc, 
+		(tp->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE));
 
 	if (want_cookie && !tmp_opt.saw_tstamp)
 		tcp_clear_options(&tmp_opt);
@@ -1942,6 +1943,7 @@
 	struct sock *sk;
 	int ret;
 	struct net *net = dev_net(skb->dev);
+	struct tcp_sock *tp;
 
 	if (skb->pkt_type != PACKET_HOST)
 		goto discard_it;
@@ -1980,6 +1982,8 @@
 	if (!sk)
 		goto no_tcp_socket;
 
+	tp = tcp_sk(sk);
+
 process:
 	if (sk->sk_state == TCP_TIME_WAIT)
 		goto do_time_wait;
@@ -2062,7 +2066,8 @@
 		inet_twsk_put(inet_twsk(sk));
 		goto csum_error;
 	}
-	switch (tcp_timewait_state_process(inet_twsk(sk), skb, th)) {
+	switch (tcp_timewait_state_process(inet_twsk(sk), skb, th,
+		(tp->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE))) {
 	case TCP_TW_SYN: {
 		struct sock *sk2 = inet_lookup_listener(dev_net(skb->dev),
 							&tcp_hashinfo,
diff --exclude CVS --exclude .git -uNr linux-3.12.38/net/ipv4/tcp_minisocks.c linux-3.12.38.modified/net/ipv4/tcp_minisocks.c
--- linux-3.12.38/net/ipv4/tcp_minisocks.c	2015-02-16 10:15:42.000000000 -0500
+++ linux-3.12.38.modified/net/ipv4/tcp_minisocks.c	2015-07-01 21:07:23.979083558 -0400
@@ -90,7 +90,7 @@
  */
 enum tcp_tw_status
 tcp_timewait_state_process(struct inet_timewait_sock *tw, struct sk_buff *skb,
-			   const struct tcphdr *th)
+			   const struct tcphdr *th, unsigned int bw_est_en)
 {
 	struct tcp_options_received tmp_opt;
 	struct tcp_timewait_sock *tcptw = tcp_twsk((struct sock *)tw);
@@ -98,7 +98,7 @@
 
 	tmp_opt.saw_tstamp = 0;
 	if (th->doff > (sizeof(*th) >> 2) && tcptw->tw_ts_recent_stamp) {
-		tcp_parse_options(skb, &tmp_opt, 0, NULL);
+		tcp_parse_options(skb, &tmp_opt, 0, NULL, bw_est_en);
 
 		if (tmp_opt.saw_tstamp) {
 			tmp_opt.rcv_tsecr	-= tcptw->tw_ts_offset;
@@ -515,7 +515,8 @@
 
 	tmp_opt.saw_tstamp = 0;
 	if (th->doff > (sizeof(struct tcphdr)>>2)) {
-		tcp_parse_options(skb, &tmp_opt, 0, NULL);
+		tcp_parse_options(skb, &tmp_opt, 0, NULL,
+				(tcp_sk(sk)->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE));
 
 		if (tmp_opt.saw_tstamp) {
 			tmp_opt.ts_recent = req->ts_recent;
diff --exclude CVS --exclude .git -uNr linux-3.12.38/net/ipv4/tcp_output.c linux-3.12.38.modified/net/ipv4/tcp_output.c
--- linux-3.12.38/net/ipv4/tcp_output.c	2015-02-16 10:15:42.000000000 -0500
+++ linux-3.12.38.modified/net/ipv4/tcp_output.c	2015-07-02 01:20:22.403745523 -0400
@@ -535,7 +535,15 @@
 
 	if (likely(sysctl_tcp_timestamps && *md5 == NULL)) {
 		opts->options |= OPTION_TS;
-		opts->tsval = TCP_SKB_CB(skb)->when + tp->tsoffset;
+		if (likely (tp->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE)) {
+			struct timeval tv;
+			u64 time_stamp64;
+			do_gettimeofday(&tv);
+			time_stamp64 = tv.tv_sec * 1000000 + tv.tv_usec;
+			opts->tsval = (u32)(time_stamp64  & (u64)LONG_MASK) + tp->tsoffset;
+		} else {
+			opts->tsval = TCP_SKB_CB(skb)->when + tp->tsoffset;
+		}
 		opts->tsecr = tp->rx_opt.ts_recent;
 		remaining -= TCPOLEN_TSTAMP_ALIGNED;
 	}
@@ -603,7 +611,16 @@
 	}
 	if (likely(ireq->tstamp_ok)) {
 		opts->options |= OPTION_TS;
-		opts->tsval = TCP_SKB_CB(skb)->when;
+		if (likely (tcp_sk(sk)->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE)) {
+			struct timeval tv;
+			u64 time_stamp64;
+			do_gettimeofday(&tv);
+			time_stamp64 = tv.tv_sec * 1000000 + tv.tv_usec;
+			opts->tsval = (u32)(time_stamp64  & (u64)LONG_MASK);
+		} else {
+			opts->tsval = TCP_SKB_CB(skb)->when;
+		}
+
 		opts->tsecr = req->ts_recent;
 		remaining -= TCPOLEN_TSTAMP_ALIGNED;
 	}
@@ -651,7 +668,16 @@
 
 	if (likely(tp->rx_opt.tstamp_ok)) {
 		opts->options |= OPTION_TS;
-		opts->tsval = tcb ? tcb->when + tp->tsoffset : 0;
+		if (likely (tp->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE)) {
+			struct timeval tv;
+			u64 time_stamp64;
+			do_gettimeofday(&tv);
+			time_stamp64 = tv.tv_sec * 1000000 + tv.tv_usec;
+			opts->tsval = tcb ? (u32)(time_stamp64  & (u64)LONG_MASK) +
+					tp->tsoffset : 0;
+		} else {
+			opts->tsval = tcb ? tcb->when + tp->tsoffset : 0;
+		}
 		opts->tsecr = tp->rx_opt.ts_recent;
 		size += TCPOLEN_TSTAMP_ALIGNED;
 	}
diff --exclude CVS --exclude .git -uNr linux-3.12.38/net/ipv6/syncookies.c linux-3.12.38.modified/net/ipv6/syncookies.c
--- linux-3.12.38/net/ipv6/syncookies.c	2015-02-16 10:15:42.000000000 -0500
+++ linux-3.12.38.modified/net/ipv6/syncookies.c	2015-06-27 20:08:47.512635730 -0400
@@ -176,7 +176,7 @@
 
 	/* check for timestamp cookie support */
 	memset(&tcp_opt, 0, sizeof(tcp_opt));
-	tcp_parse_options(skb, &tcp_opt, 0, NULL);
+	tcp_parse_options(skb, &tcp_opt, 0, NULL, 0);
 
 	if (!cookie_check_timestamp(&tcp_opt, sock_net(sk), &ecn_ok))
 		goto out;
diff --exclude CVS --exclude .git -uNr linux-3.12.38/net/ipv6/tcp_ipv6.c linux-3.12.38.modified/net/ipv6/tcp_ipv6.c
--- linux-3.12.38/net/ipv6/tcp_ipv6.c	2015-02-16 10:15:42.000000000 -0500
+++ linux-3.12.38.modified/net/ipv6/tcp_ipv6.c	2015-07-01 02:26:16.105565223 -0400
@@ -986,7 +986,7 @@
 	tcp_clear_options(&tmp_opt);
 	tmp_opt.mss_clamp = IPV6_MIN_MTU - sizeof(struct tcphdr) - sizeof(struct ipv6hdr);
 	tmp_opt.user_mss = tp->rx_opt.user_mss;
-	tcp_parse_options(skb, &tmp_opt, 0, NULL);
+	tcp_parse_options(skb, &tmp_opt, 0, NULL, 0);
 
 	if (want_cookie && !tmp_opt.saw_tstamp)
 		tcp_clear_options(&tmp_opt);
@@ -1445,6 +1445,7 @@
 	const struct ipv6hdr *hdr;
 	struct sock *sk;
 	int ret;
+	struct tcp_sock *tp;
 	struct net *net = dev_net(skb->dev);
 
 	if (skb->pkt_type != PACKET_HOST)
@@ -1482,6 +1483,8 @@
 	if (!sk)
 		goto no_tcp_socket;
 
+	tp = tcp_sk(sk);
+
 process:
 	if (sk->sk_state == TCP_TIME_WAIT)
 		goto do_time_wait;
@@ -1562,7 +1565,8 @@
 		goto csum_error;
 	}
 
-	switch (tcp_timewait_state_process(inet_twsk(sk), skb, th)) {
+	switch (tcp_timewait_state_process(inet_twsk(sk), skb, th,
+		(tp->bw_est_stats.est_mode != TCP_BW_EST_TYPE_NO_ACTIVE))) {
 	case TCP_TW_SYN:
 	{
 		struct sock *sk2;
